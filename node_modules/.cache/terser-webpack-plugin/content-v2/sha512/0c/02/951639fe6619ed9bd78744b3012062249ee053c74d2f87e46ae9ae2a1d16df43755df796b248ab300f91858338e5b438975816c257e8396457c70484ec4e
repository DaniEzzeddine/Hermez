{"map":"{\"version\":3,\"sources\":[\"/Users/DaniEzzeddine/Hermez/node_modules/url-loader/dist/cjs.js??ref--6-oneOf-0!/Users/DaniEzzeddine/Hermez/src/components/assets/hermes.png\",\"/Users/DaniEzzeddine/Hermez/src/components/Header.jsx\",\"/Users/DaniEzzeddine/Hermez/src/App.js\",\"/Users/DaniEzzeddine/Hermez/src/components/Navigation.jsx\",\"/Users/DaniEzzeddine/Hermez/src/serviceWorker.js\",\"/Users/DaniEzzeddine/Hermez/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"Header\",\"react_default\",\"a\",\"createElement\",\"className\",\"width\",\"src\",\"hermes\",\"alt\",\"NavLink\",\"to\",\"activeClassName\",\"Component\",\"App\",\"components_Header\",\"ActiveMailingList\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"render\",\"BrowserRouter\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+MCyBzBC,mLAnBX,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,iDACbH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,MAAM,OAAOC,IAAKC,EAAAA,EAAQC,IAAI,WACnCP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEL,UAAU,+BACVM,GAAG,IACHC,gBAAgB,YAHlB,0BAPSC,EAAAA,WCWNC,GCZUD,EAAAA,2LDGrB,OACEX,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAAEY,kBAAF,cALUH,EAAAA,YEMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,OAAAA,EAAAA,OAAAA,CACEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAD,OAEFC,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/hermes.b16dc722.png\\\";\",\"import React, { Component } from 'react';\\nimport { NavLink } from 'react-router-dom'\\nimport hermes from 'hermes.png';\\n\\nclass Header extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"row\\\">\\n        <div className=\\\"col\\\">\\n          <nav className=\\\"navbar sticky-top navbar-light bg-light w-100\\\">\\n            <img width=\\\"80px\\\" src={hermes} alt=\\\"hermes\\\" />\\n            <NavLink\\n              className=\\\"navbar navbar-light bg-light\\\"\\n              to=\\\"/\\\"\\n              activeClassName=\\\"selected\\\"\\n            >\\n              Mailing List\\n            </NavLink>\\n          </nav>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default Header;\\n\",\"import React, { Component } from 'react';\\nimport Header from 'Header';\\nimport Navigation from 'Navigation';\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"container-fluid\\\">\\n        <Header />\\n        < ActiveMailingList />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"import React, { Component } from 'react';\\nimport { Route, Switch } from 'react-router'\\n\\nclass Navigation extends Component {\\n  render() {\\n    return (\\n      <div className=\\\"row\\\">\\n        <div className=\\\"col\\\">\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default Navigation;\\n\",\"// In production, we register a service worker to serve assets from local cache.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on the \\\"N+1\\\" visit to a page, since previously\\n// cached resources are updated in the background.\\n\\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\\n// This link also includes instructions on opting out of this behavior.\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\\n          );\\n        });\\n      } else {\\n        // Is not local host. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the old content will have been purged and\\n              // the fresh content will have been added to the cache.\\n              // It's the perfect time to display a \\\"New content is\\n              // available; please refresh.\\\" message in your web app.\\n              console.log('New content is available; please refresh.');\\n\\n              // Execute callback\\n              if (config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      if (\\n        response.status === 404 ||\\n        response.headers.get('content-type').indexOf('javascript') === -1\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport { render } from 'react-dom'\\nimport { BrowserRouter } from 'react-router-dom'\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nrender(\\n  <BrowserRouter>\\n    <App />\\n  </BrowserRouter>,\\n  document.getElementById('root')\\n);\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{13:function(e,t,a){e.exports=a.p+\"static/media/hermes.b16dc722.png\"},16:function(e,t,a){e.exports=a(24)},24:function(e,t,a){\"use strict\";a.r(t);var n=a(1),c=a.n(n),r=a(12),i=a(27),o=a(5),l=a(6),s=a(8),m=a(7),u=a(9),b=a(26),h=a(13),d=a.n(h),p=function(e){function t(){return Object(o.a)(this,t),Object(s.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return c.a.createElement(\"div\",{className:\"row\"},c.a.createElement(\"div\",{className:\"col\"},c.a.createElement(\"nav\",{className:\"navbar sticky-top navbar-light bg-light w-100\"},c.a.createElement(\"img\",{width:\"80px\",src:d.a,alt:\"hermes\"}),c.a.createElement(b.a,{className:\"navbar navbar-light bg-light\",to:\"/\",activeClassName:\"selected\"},\"Mailing List\"))))}}]),t}(n.Component),v=(n.Component,function(e){function t(){return Object(o.a)(this,t),Object(s.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(l.a)(t,[{key:\"render\",value:function(){return c.a.createElement(\"div\",{className:\"container-fluid\"},c.a.createElement(p,null),c.a.createElement(ActiveMailingList,null))}}]),t}(n.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));Object(r.render)(c.a.createElement(i.a,null,c.a.createElement(v,null)),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[16,2,1]]]);","extractedComments":[]}